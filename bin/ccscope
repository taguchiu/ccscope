#!/usr/bin/env node

/**
 * CCScope (Claude Code Scope) - Interactive Conversation Browser
 * Command line entry point with subcommand support
 */

const path = require('path');
const CCLensApplication = require('../src/CCScope');

// Get package version
const packageJson = require('../package.json');
const VERSION = packageJson.version;

// Parse command line arguments
function parseArguments() {
  const args = process.argv.slice(2);
  
  // Check for version flag first
  if (args.includes('--version') || args.includes('-v')) {
    console.log(`CCScope v${VERSION}`);
    process.exit(0);
  }
  
  // Default options
  const options = {
    command: null,
    debug: false,
    help: false
  };
  
  // Check if first argument is a command
  const commands = ['daily', 'project'];
  if (args.length > 0 && commands.includes(args[0])) {
    options.command = args[0];
    args.shift(); // Remove command from args
  }
  
  // Parse remaining options
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    switch (arg) {
      case '--debug':
      case '-d':
        options.debug = true;
        break;
      case '--help':
      case '-h':
        options.help = true;
        break;
    }
  }
  
  return options;
}

// Show general help message
function showHelp() {
  console.log(`
üîç CCScope (Claude Code Scope) v${VERSION}

USAGE:
  ccscope [command] <OPTIONS>
  ccscope <OPTIONS>

COMMANDS:
  daily            Show usage report grouped by date
  project          Show usage report grouped by project

OPTIONS:
  -d, --debug              Enable debug mode
  -h, --help              Show this help message
  -v, --version           Show version information

For more info, run any command with the --help flag:
  ccscope daily --help
  ccscope project --help

EXAMPLES:
  ccscope                  # Interactive browser mode
  ccscope daily            # Show daily statistics
  ccscope project          # Show project statistics

INTERACTIVE MODE NAVIGATION:
  ‚Üë/‚Üì or k/j    Navigate up/down
  ‚Üê/‚Üí or h/l    Navigate left/right
  Enter         Select/Enter view
  Esc or q      Back/Exit
  h or ?        Help
  /             Search
  f             Filter
  s             Sort

More information: https://github.com/taguchiu/ccscope
  `);
}

// Show command-specific help
function showCommandHelp(command) {
  switch (command) {
    case 'daily':
      console.log(`
üîç CCScope daily - Show daily conversation statistics

USAGE:
  ccscope daily [OPTIONS]

DESCRIPTION:
  Displays conversation statistics grouped by date, including:
  - Number of sessions per day
  - Total conversations per day
  - Total and average duration
  - Tool usage count

OPTIONS:
  -d, --debug              Enable debug mode
  -h, --help              Show this help message

EXAMPLES:
  ccscope daily
  ccscope daily --debug
      `);
      break;
      
    case 'project':
      console.log(`
üîç CCScope project - Show project statistics

USAGE:
  ccscope project [OPTIONS]

DESCRIPTION:
  Displays conversation statistics grouped by project, including:
  - Number of sessions per project
  - Total conversations per project
  - Total duration per project
  - Average thinking rate per project

OPTIONS:
  -d, --debug              Enable debug mode
  -h, --help              Show this help message

EXAMPLES:
  ccscope project
  ccscope project --debug
      `);
      break;
  }
}

// Main entry point
async function main() {
  const options = parseArguments();
  
  // Show help if requested
  if (options.help) {
    if (options.command) {
      showCommandHelp(options.command);
    } else {
      showHelp();
    }
    return;
  }
  
  try {
    const app = new CCLensApplication();
    
    // Apply CLI options
    if (options.debug) {
      app.enableDebug();
    }
    
    // Execute command or start interactive mode
    switch (options.command) {
      case 'daily':
        await app.showDailyStatistics();
        break;
        
      case 'project':
        await app.showProjectStatistics();
        break;
        
      default:
        // No command specified, start interactive browser
        await app.start();
        break;
    }
    
  } catch (error) {
    console.error('‚ùå Failed to start CCScope:', error);
    process.exit(1);
  }
}

// Run the application
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Fatal error:', error);
    process.exit(1);
  });
}