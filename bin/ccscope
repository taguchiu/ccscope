#!/usr/bin/env node

/**
 * CCScope (Claude Code Scope) - Interactive Conversation Browser
 * Command line entry point with subcommand support
 */

const path = require('path');
const CCLensApplication = require('../src/CCScope');

// Get package version
const packageJson = require('../package.json');
const VERSION = packageJson.version;

// Parse command line arguments
function parseArguments() {
  const args = process.argv.slice(2);
  
  // Check for version flag first
  if (args.includes('--version') || args.includes('-v')) {
    console.log(`CCScope v${VERSION}`);
    process.exit(0);
  }
  
  // Default options
  const options = {
    command: null,
    debug: false,
    theme: 'default',
    language: 'en',
    help: false
  };
  
  // Check if first argument is a command
  const commands = ['daily', 'project', 'session', 'ultrathink'];
  if (args.length > 0 && commands.includes(args[0])) {
    options.command = args[0];
    args.shift(); // Remove command from args
  }
  
  // Parse remaining options
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    switch (arg) {
      case '--debug':
      case '-d':
        options.debug = true;
        break;
      case '--theme':
      case '-t':
        options.theme = args[++i] || 'default';
        break;
      case '--language':
      case '-l':
        options.language = args[++i] || 'en';
        break;
      case '--help':
      case '-h':
        options.help = true;
        break;
    }
  }
  
  return options;
}

// Show general help message
function showHelp() {
  console.log(`
üîç CCScope (Claude Code Scope) v${VERSION}

USAGE:
  ccscope [command] <OPTIONS>
  ccscope <OPTIONS>

COMMANDS:
  daily            Show usage report grouped by date
  project          Show usage report grouped by project
  session          Show usage report grouped by session
  ultrathink       Show sessions with high thinking rates (>50%)

OPTIONS:
  -d, --debug              Enable debug mode
  -t, --theme <theme>      Set theme (default, dark, light, minimal)
  -l, --language <lang>    Set language (en, ja)
  -h, --help              Show this help message
  -v, --version           Show version information

For more info, run any command with the --help flag:
  ccscope daily --help
  ccscope project --help
  ccscope session --help
  ccscope ultrathink --help

EXAMPLES:
  ccscope                  # Interactive browser mode
  ccscope daily            # Show daily statistics
  ccscope project          # Show project statistics
  ccscope session          # Show session statistics
  ccscope ultrathink       # Show high thinking rate sessions
  ccscope --theme dark     # Use dark theme
  ccscope --language ja    # Use Japanese language

INTERACTIVE MODE NAVIGATION:
  ‚Üë/‚Üì or k/j    Navigate up/down
  ‚Üê/‚Üí or h/l    Navigate left/right
  Enter         Select/Enter view
  Esc or q      Back/Exit
  h or ?        Help
  /             Search
  f             Filter
  s             Sort

More information: https://github.com/taguchiu/ccscope
  `);
}

// Show command-specific help
function showCommandHelp(command) {
  switch (command) {
    case 'daily':
      console.log(`
üîç CCScope daily - Show daily conversation statistics

USAGE:
  ccscope daily [OPTIONS]

DESCRIPTION:
  Displays conversation statistics grouped by date, including:
  - Number of sessions per day
  - Total conversations per day
  - Total and average duration
  - Tool usage count

OPTIONS:
  -d, --debug              Enable debug mode
  -t, --theme <theme>      Set theme (default, dark, light, minimal)
  -h, --help              Show this help message

EXAMPLES:
  ccscope daily
  ccscope daily --theme dark
      `);
      break;
      
    case 'project':
      console.log(`
üîç CCScope project - Show project statistics

USAGE:
  ccscope project [OPTIONS]

DESCRIPTION:
  Displays conversation statistics grouped by project, including:
  - Number of sessions per project
  - Total conversations per project
  - Total duration per project
  - Average thinking rate per project

OPTIONS:
  -d, --debug              Enable debug mode
  -t, --theme <theme>      Set theme (default, dark, light, minimal)
  -h, --help              Show this help message

EXAMPLES:
  ccscope project
  ccscope project --theme dark
      `);
      break;
      
    case 'session':
      console.log(`
üîç CCScope session - Show session statistics

USAGE:
  ccscope session [OPTIONS]

DESCRIPTION:
  Displays detailed statistics for each session, including:
  - Session ID and project
  - Number of conversations
  - Total duration
  - Thinking rate
  - Tool usage breakdown

OPTIONS:
  -d, --debug              Enable debug mode
  -t, --theme <theme>      Set theme (default, dark, light, minimal)
  -h, --help              Show this help message

EXAMPLES:
  ccscope session
  ccscope session --theme dark
      `);
      break;
      
    case 'ultrathink':
      console.log(`
üîç CCScope ultrathink - Show high thinking rate sessions

USAGE:
  ccscope ultrathink [OPTIONS]

DESCRIPTION:
  Displays sessions with thinking rates above 50%, sorted by thinking rate.
  These sessions typically involve:
  - Complex problem solving
  - Architecture and design decisions
  - Creative implementations
  - User experience optimization

OPTIONS:
  -d, --debug              Enable debug mode
  -t, --theme <theme>      Set theme (default, dark, light, minimal)
  -h, --help              Show this help message

EXAMPLES:
  ccscope ultrathink
  ccscope ultrathink --theme dark
      `);
      break;
  }
}

// Main entry point
async function main() {
  const options = parseArguments();
  
  // Show help if requested
  if (options.help) {
    if (options.command) {
      showCommandHelp(options.command);
    } else {
      showHelp();
    }
    return;
  }
  
  try {
    const app = new CCLensApplication();
    
    // Apply CLI options
    if (options.debug) {
      app.enableDebug();
    }
    
    if (options.theme !== 'default') {
      app.themeManager.setTheme(options.theme);
    }
    
    if (options.language !== 'en') {
      app.stateManager.setLanguage(options.language);
    }
    
    // Execute command or start interactive mode
    switch (options.command) {
      case 'daily':
        await app.showDailyStatistics();
        break;
        
      case 'project':
        await app.showProjectStatistics();
        break;
        
      case 'session':
        await app.showSessionStatistics();
        break;
        
      case 'ultrathink':
        await app.showUltrathinkSessions();
        break;
        
      default:
        // No command specified, start interactive browser
        await app.start();
        break;
    }
    
  } catch (error) {
    console.error('‚ùå Failed to start CCScope:', error);
    process.exit(1);
  }
}

// Run the application
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Fatal error:', error);
    process.exit(1);
  });
}